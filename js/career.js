// Generated by CoffeeScript 1.9.3
(function() {
  var append, extractLink, mkString, timeline;

  mkString = function(element, obj) {
    var i, len, results, s;
    if (obj.constructor.name === 'Array') {
      results = [];
      for (i = 0, len = obj.length; i < len; i++) {
        s = obj[i];
        append(element, s);
        results.push(element.append('br'));
      }
      return results;
    } else {
      return append(element, obj);
    }
  };

  append = function(element, string) {
    var link, newString, ref;
    ref = extractLink(string), newString = ref[0], link = ref[1];
    element.append('span').text(newString);
    if (link != null) {
      return element.append('sup').append('a').attr('href', link).attr('target', '_blank').append('i').attr({
        "class": 'fa fas-external-link'
      }).style('color', '#779900');
    }
  };

  extractLink = function(string) {
    var matches, pattern;
    pattern = /(.*)@(.+)@/;
    matches = string.match(pattern);
    if (matches) {
      return matches.slice(1, 3);
    } else {
      return [string, null];
    }
  };

  timeline = d3.select('#career ul.timeline');

  d3.json("data/career.json", function(data) {
    var careerData, i, info, key, len, li, list, obj, panel, results, value;
    careerData = data.reverse();
    results = [];
    for (i = 0, len = careerData.length; i < len; i++) {
      obj = careerData[i];
      if (obj.milestone != null) {
        results.push(timeline.append('li').attr({
          "class": 'tldate'
        }).text(obj.milestone));
      } else {
        li = timeline.append('li');
        if ('$inverted' in obj) {
          li.attr({
            "class": 'timeline-inverted'
          });
        }
        li.append('div').attr({
          "class": 'tl-circ'
        });
        panel = li.append('div');
        if ('$inverted' in obj) {
          panel.attr({
            "class": 'timeline-panel wow fadeInRight animated'
          });
        } else {
          panel.attr({
            "class": 'timeline-panel wow fadeInLeft animated'
          });
        }
        panel.attr('data-wow-delay', '2s');
        panel.append('div').attr({
          "class": 'tl-heading'
        }).append('h4').text(obj['$title']);
        list = panel.append('ul');
        list.attr({
          "class": 'tl-body'
        });
        results.push((function() {
          var results1;
          results1 = [];
          for (key in obj) {
            value = obj[key];
            if (key === '$title' || key === '$inverted') {
              continue;
            }
            info = list.append('li');
            if (key === '$time') {
              info.append('i').attr({
                "class": 'glyphicon glyphicon-time'
              });
              info.append('br');
              info.append('span').text(obj['$time']);
              results1.push(info.append('br'));
            } else if (key === '$place') {
              info.append('i').attr({
                "class": 'glyphicon glyphicon-map-marker'
              });
              info.append('br');
              mkString(info, obj['$place']);
              results1.push(info.append('br'));
            } else if (key === '$venue') {
              info.append('i').attr({
                "class": 'glyphicon glyphicon-home'
              });
              info.append('br');
              mkString(info, obj['$venue']);
              results1.push(info.append('br'));
            } else if (key !== '$title' && key !== '$inverted') {
              info.append('span').attr({
                "class": 'emph'
              }).text(key);
              info.append('br');
              mkString(info, obj[key]);
              results1.push(info.append('br'));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        })());
      }
    }
    return results;
  });

}).call(this);
